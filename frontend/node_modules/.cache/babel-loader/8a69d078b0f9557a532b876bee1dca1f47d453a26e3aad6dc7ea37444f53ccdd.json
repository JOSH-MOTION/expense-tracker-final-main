{"ast":null,"code":"var _jsxFileName = \"/Users/macintoshhd/Downloads/expense-tracker-main/frontend/src/Components/Chart/Chart.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Chart as ChartJs, DoughnutController, ArcElement, Title, Tooltip, CategoryScale, LinearScale } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport styled from 'styled-components';\nimport { useGlobalContext } from '../../context/globalContext';\nimport { dateFormat } from '../../utils/dateFormat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJs.register(DoughnutController, ArcElement, Title, Tooltip, CategoryScale, LinearScale);\nfunction Chart() {\n  _s();\n  const {\n    incomes,\n    expenses\n  } = useGlobalContext();\n\n  // Create a data structure that includes colors for each expense category\n  const expenseData = expenses.map(expense => ({\n    category: expense.category,\n    amount: expense.amount,\n    color: getRandomColor()\n  }));\n  const incomeColor = 'green';\n  const data = {\n    labels: ['Income', ...expenseData.map(expense => expense.category)],\n    datasets: [{\n      data: [incomes.reduce((total, income) => total + income.amount, 0), ...expenseData.map(expense => expense.amount)],\n      backgroundColor: [incomeColor, ...expenseData.map(expense => expense.color)]\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(ChartContainer, {\n    children: [/*#__PURE__*/_jsxDEV(DoughnutChartContainer, {\n      children: /*#__PURE__*/_jsxDEV(Doughnut, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SummaryContainer, {\n      children: [/*#__PURE__*/_jsxDEV(SummaryTitle, {\n        children: \"Expense Summary:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: expenseData.map(expense => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: expense.color\n            },\n            children: [expense.category, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this), \" $\", expense.amount]\n        }, expense.category, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(Chart, \"FD0wmpS8gvIkX+imi80kDHo7xkc=\", false, function () {\n  return [useGlobalContext];\n});\n_c = Chart;\nconst ChartContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n_c2 = ChartContainer;\nconst DoughnutChartContainer = styled.div`\n  flex: 1;\n`;\n_c3 = DoughnutChartContainer;\nconst SummaryContainer = styled.div`\n  flex: 1;\n  padding-left: 20px;\n`;\n_c4 = SummaryContainer;\nconst SummaryTitle = styled.h2`\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n_c5 = SummaryTitle;\nconst ChartStyled = styled.div`\n    background: #FCF6F9;\n    border: 2px solid #FFFFFF;\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n    padding: 1rem;\n    border-radius: 20px;\n    height: 100%;\n`;\nexport default Chart;\n\n// Function to generate a random color\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Chart\");\n$RefreshReg$(_c2, \"ChartContainer\");\n$RefreshReg$(_c3, \"DoughnutChartContainer\");\n$RefreshReg$(_c4, \"SummaryContainer\");\n$RefreshReg$(_c5, \"SummaryTitle\");","map":{"version":3,"names":["React","Chart","ChartJs","DoughnutController","ArcElement","Title","Tooltip","CategoryScale","LinearScale","Doughnut","styled","useGlobalContext","dateFormat","register","incomes","expenses","expenseData","map","expense","category","amount","color","getRandomColor","incomeColor","data","labels","datasets","reduce","total","income","backgroundColor","ChartContainer","div","DoughnutChartContainer","SummaryContainer","SummaryTitle","h2","ChartStyled","letters","i","Math","floor","random"],"sources":["/Users/macintoshhd/Downloads/expense-tracker-main/frontend/src/Components/Chart/Chart.js"],"sourcesContent":["import React from 'react'\nimport {Chart as ChartJs, \n    DoughnutController,\n    ArcElement,\n    Title,\n    Tooltip,\n    CategoryScale,\n    LinearScale,\n  } from 'chart.js';\n\nimport {Doughnut} from 'react-chartjs-2'\nimport styled from 'styled-components'\nimport { useGlobalContext } from '../../context/globalContext'\nimport { dateFormat } from '../../utils/dateFormat'\n\n\nChartJs.register(\n    DoughnutController,\n    ArcElement,\n    Title,\n    Tooltip,\n    CategoryScale,\n    LinearScale,\n  );\n\nfunction Chart() {\n    const {incomes, expenses} = useGlobalContext()\n\n    // Create a data structure that includes colors for each expense category\n  const expenseData = expenses.map((expense) => ({\n    category: expense.category,\n    amount: expense.amount,\n    color: getRandomColor(),\n  }));\n\n  const incomeColor = 'green';\n\n    const data = {\n        labels: ['Income', ...expenseData.map((expense) => expense.category)],\n        datasets: [\n          {\n            data: [incomes.reduce((total, income) => total + income.amount, 0), ...expenseData.map((expense) => expense.amount)],\n            backgroundColor: [incomeColor, ...expenseData.map((expense) => expense.color)],\n          },\n        ],\n      };\n\n      return (\n        <ChartContainer>\n        <DoughnutChartContainer>\n          <Doughnut data={data} />\n        </DoughnutChartContainer>\n        <SummaryContainer>\n          <SummaryTitle>Expense Summary:</SummaryTitle>\n          <ul>\n            {expenseData.map((expense) => (\n              <li key={expense.category}>\n                <span style={{ color: expense.color }}>{expense.category}:</span> ${expense.amount}\n              </li>\n            ))}\n          </ul>\n        </SummaryContainer>\n      </ChartContainer>\n      );\n}\n\nconst ChartContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst DoughnutChartContainer = styled.div`\n  flex: 1;\n`;\n\nconst SummaryContainer = styled.div`\n  flex: 1;\n  padding-left: 20px;\n`;\n\nconst SummaryTitle = styled.h2`\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nconst ChartStyled = styled.div`\n    background: #FCF6F9;\n    border: 2px solid #FFFFFF;\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n    padding: 1rem;\n    border-radius: 20px;\n    height: 100%;\n`;\n\nexport default Chart\n\n// Function to generate a random color\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}